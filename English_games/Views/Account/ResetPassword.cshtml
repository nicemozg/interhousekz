@model ResetPasswordViewModel
@{
    ViewData["Title"] = "Сброс пароля";
}

<div class="row justify-content-center">
    <div class="col-md-6 mx-auto reset-password login-reset-password">
        <h4>@ViewData["Title"]</h4>
        @{
            if (ViewBag.Error is not null)
            {
                <h5 class="text-danger">@ViewBag.Error</h5>
            }
        }
        <form method="post" asp-action="ResetPassword" id="resetPasswordForm">
            @* <div asp-validation-summary="All" class="text-danger"></div> *@
            <input asp-for="Code" type="hidden"/>
            <div class="form-group">
                <label asp-for="CodeNumberForResetPassword"></label>
                <div class="input-group">
                    <input asp-for="CodeNumberForResetPassword"
                           class="form-control"
                           id="codeNumberInput"
                           maxlength="4"/>
                </div>
                <span asp-validation-for="CodeNumberForResetPassword" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input asp-for="UserName"
                       class="form-control"
                       type="hidden"
                       value="@TempData["userName"]"/>
            </div>
            <div class="form-group">
                <label asp-for="Password"></label>
                <div class="input-group">
                    <input asp-for="Password"
                           id="password"
                           class="form-control"
                           type="password"/>
                    <span class="input-group-text" id="eyeIconPassword" onclick="togglePasswordVisibility('password')">
                        <i id="eyePassword" class="far fa-eye"></i>
                    </span>
                </div>
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ConfirmPassword"></label>
                <div class="input-group">
                    <input asp-for="ConfirmPassword"
                           id="confirmPassword"
                           class="form-control"
                           type="password"/>
                    <span class="input-group-text" id="eyeIconConfirmPassword" onclick="togglePasswordVisibility('confirmPassword')">
                        <i id="eyeConfirmPassword" class="far fa-eye"></i>
                    </span>
                </div>
                <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
            </div>
            
            <button type="submit"
                    class="btn btn-primary mt-3 new-sms d-block mx-auto"
                    id="submitButton">Сбросить
            </button>
            
            <button id="sendSmsButton"
                    type="button"
                    class="btn btn-primary mt-3 new-sms d-block mx-auto"
                    onclick="sendSmsClick()"
                    disabled>
                Новый смс <span id="timer"></span>
            </button>
        </form>

        <input type="hidden" id="smsTimer" name="smsTimer" value="120"/>
    </div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var codeNumberInput = document.getElementById("codeNumberInput");
        var passwordInput = document.getElementById("password");
        var confirmPasswordInput = document.getElementById("confirmPassword");
        var submitButton = document.getElementById("submitButton");
        var sendSmsButton = document.getElementById("sendSmsButton");
    
        // Функция для проверки валидности формы
        function validateForm() {
            // Проверяем, содержит ли поле ввода кода 4 цифры
            var codeIsValid = /^\d{4}$/.test(codeNumberInput.value);
    
            // Проверяем длину пароля
            var passwordIsValid = passwordInput.value.length >= 6;
    
            // Проверяем совпадение паролей
            var passwordsMatch = passwordInput.value === confirmPasswordInput.value;
    
            // Активируем или деактивируем кнопку в зависимости от результатов проверок
            if (codeIsValid && passwordIsValid && passwordsMatch) {
                submitButton.classList.remove("d-none");
                submitButton.classList.add("d-block");
                sendSmsButton.classList.remove("d-block");
                sendSmsButton.classList.add("d-none");
                // submitButton.removeAttribute("disabled");
            } else {
                submitButton.classList.remove("d-block");
                submitButton.classList.add("d-none");
                sendSmsButton.classList.remove("d-none");
                sendSmsButton.classList.add("d-block");
                // submitButton.setAttribute("disabled", "disabled");
            }
        }
    
        // Добавляем слушателя события "input" для поля ввода кода
        codeNumberInput.addEventListener("input", function () {
            // Удаляем все символы, кроме цифр
            var sanitizedCode = codeNumberInput.value.replace(/[^\d]/g, '');
    
            // Ограничиваем длину кода 4 символами
            var truncatedCode = sanitizedCode.slice(0, 4);
    
            // Обновляем значение в поле ввода
            codeNumberInput.value = truncatedCode;
    
            // Вызываем функцию валидации
            validateForm();
        });
    
        // Добавляем слушателя события "input" для поля ввода пароля
        passwordInput.addEventListener("input", validateForm);
    
        // Добавляем слушателя события "input" для поля ввода подтверждения пароля
        confirmPasswordInput.addEventListener("input", validateForm);
    
        // Вызываем функцию валидации при загрузке страницы
        validateForm();
    });
    
    var smsTimer = parseInt(document.getElementById("smsTimer").value || 0);
    startSmsTimer(smsTimer);
    
    async function sendSmsClick() {
        await fetch('/Account/SendSms', {
            method: 'GET',
        });
        document.getElementById("smsTimer").value = "120";
    
        document.getElementById("sendSmsButton").disabled = true;
        document.getElementById("smsTimer").value = "120";
        var smsTimer = parseInt(document.getElementById("smsTimer").value || 0);
        startSmsTimer(smsTimer);
    }
    
    function startSmsTimer(smsTimer) {
        var seconds = smsTimer;
        var timerElement = document.getElementById("timer");
        var sendSmsButton = document.getElementById("sendSmsButton");
        timerElement.style.display = 'inline';
        var intervalId = setInterval(function () {
            seconds--;
            timerElement.innerHTML = seconds + ' сек';
            if (seconds <= 0) {
                sendSmsButton.disabled = false;
                timerElement.innerHTML = '';
                timerElement.style.display = 'none';
                clearInterval(intervalId);
            }
        }, 1000);
    }
    
    function togglePasswordVisibility(inputId) {
        var passwordInput = document.getElementById(inputId);
        var eyeIcon = document.getElementById("eye" + inputId);
        if (passwordInput.type === "password") {
            passwordInput.type = "text";
            eyeIcon.classList.remove("bi-eye");
            eyeIcon.classList.add("bi-eye-slash");
        } else {
            passwordInput.type = "password";
            eyeIcon.classList.remove("bi-eye-slash");
            eyeIcon.classList.add("bi-eye");
        }
    
        // Вызываем функцию валидации после изменения видимости пароля
        validateForm();
    }

</script>
}